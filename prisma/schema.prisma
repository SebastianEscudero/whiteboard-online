generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  organizations OrganizationUser[]
}

model Organization {
  id               String                    @id @default(cuid())
  name             String
  subscriptionPlan SubscriptionType          @default(Gratis)
  invitations      OrganizationInvitation[]
  subscription     OrganizationSubscription?
  users            OrganizationUser[]
}

model OrganizationUser {
  userId         String
  organizationId String
  role           Role?
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model OrganizationInvitation {
  id               String           @id @default(cuid())
  email            String?
  organizationId   String
  createdAt        DateTime         @default(now())
  status           String           @default("PENDING")
  role             Role?
  subscriptionPlan SubscriptionType @default(Gratis)
  organization     Organization     @relation(fields: [organizationId], references: [id])

  @@unique([email, organizationId])
}

model OrganizationSubscription {
  subscriptionId              String       @id(map: "PK_OrganizationSubscription") @db.VarChar(255)
  payerId                     String       @db.VarChar(255)
  status                      String       @db.VarChar(255)
  mercadoPagoCurrentPeriodEnd DateTime?    @db.Timestamp(6)
  organizationId              String       @unique @db.VarChar(255)
  organization                Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_OrganizationSubscription_Organization")
}

enum SubscriptionType {
  Starter
  Business
  Gratis
}

enum Role {
  Admin
  Member
  Guest
}
